openapi: 3.0.3
info:
  title: Store Client API
  version: 1.0.0
  description: Description of the API...
  license:
    name: License
    url: http://atorres.es
  x-icon: credit_card
servers:
  - description: Prism mock server
    url: http://localhost:4010
  - description: Service running locally
    url: http://localhost:9917
tags:
  - name: product-composite-client
paths:
  /client-api/v1/product-composite/{productId}:
    get:
      tags:
        - product-composite-client
      summary: Retrieve product view by ID
      description: |
        # Normal response
        If the requested product ID is found, then the method will return information regarding:
        1. Base product information
        1. Reviews

        # Expected partial and error responses
        In the following cases, only a partial response will be created (used to simplify testing of error conditions)

        ## Product ID 113
        200 - Ok, but no recommendations will be returned

        ## Product ID 213
        200 - Ok, but no reviews will be returned

        ## Non numerical product ID
        400 - A <b>Bad Request</b> error will be returned

        ## Product ID 13
        404 - A <b>Not Found</b> error will be returned

        ## Negative product IDs
        422 - An <b>Unprocessable Entity</b> error will be returned
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          description: productId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          $ref: 'schemas/definitions.yaml#/components/responses/200ProductAggregate'
        '400':
          $ref: 'lib/common-types.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'lib/common-types.yaml#/components/responses/401Unauthorized'
        '404':
          $ref: 'lib/common-types.yaml#/components/responses/404NotFound'
        '500':
          $ref: 'lib/common-types.yaml#/components/responses/500InternalServerError'

  /client-api/v1/product-composite/{productId}/stars:
    get:
      tags:
        - product-composite-client
      summary: Stars for a product
      description: Get stars
      operationId: getStarsForProductById
      parameters:
        - name: productId
          in: path
          description: productId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful stars response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stars'
            text/plain:
              schema:
                type: string
        '400':
          $ref: 'lib/common-types.yaml#/components/responses/400BadRequest'

  /client-api/v1/product-composite:
    post:
      tags:
        - product-composite-client
      summary: Create a product aggregate
      description: Creates a product aggregate
      operationId: postProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'schemas/definitions.yaml#/components/schemas/ProductAggregate'
            example:
              $ref: examples/product-aggregate.json
      responses:
        '200':
          $ref: 'schemas/definitions.yaml#/components/responses/200ProductAggregate'
components:
  schemas:
    Stars:
      type: object
      properties:
        stars:
          type: integer
          required: true
