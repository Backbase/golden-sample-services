openapi: 3.0.3
info:
  title: Store Client API
  version: 1.0.0
  description: Description of the API...
  license:
    name: License
    url: http://atorres.es
  x-icon: credit_card
servers:
  - description: Prism mock server
    url: http://localhost:4010
  - description: Service running locally
    url: http://localhost:9917
tags:
  - name: product-composite-client
paths:
  /client-api/v1/product-composite/{productId}:
    get:
      tags:
        - product-composite-client
      summary: Retrieve product view by ID
      description: |
        # Normal response
        If the requested product ID is found, then the method will return information regarding:
        1. Base product information
        1. Reviews

        # Expected partial and error responses
        In the following cases, only a partial response will be created (used to simplify testing of error conditions)

        ## Product ID 113
        200 - Ok, but no recommendations will be returned

        ## Product ID 213
        200 - Ok, but no reviews will be returned

        ## Non numerical product ID
        400 - A <b>Bad Request</b> error will be returned

        ## Product ID 13
        404 - A <b>Not Found</b> error will be returned

        ## Negative product IDs
        422 - An <b>Unprocessable Entity</b> error will be returned
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          description: productId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: If the product is retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductAggregate'
              example:
                $ref: examples/product-aggregate.json
        '400':
          description: If one or more request parameters don't comply with the specification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              example:
                $ref: lib/examples/bad-request-validation-error.json
        '401':
          description: If the authentication credentials provided are invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
              example:
                $ref: lib/examples/unauthorized-error.json
        '404':
          description: If the product cannot be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              example:
                $ref: lib/examples/not-found-error.json
        '500':
          description: If a runtime error occurs while processing the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
              example:
                $ref: lib/examples/internal-server-error.json
  /client-api/v1/product-composite:
    post:
      tags:
        - product-composite-client
      summary: Create a product aggregate
      description: Creates a product aggregate
      operationId: postProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductAggregate'
            example:
              $ref: examples/product-aggregate.json
      responses:
        '200':
          description: If the product has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductAggregate'
              example:
                $ref: examples/product-aggregate.json
components:
  schemas:
    ProductAggregate:
      $ref: schemas/product-aggregate.yaml
    ReviewSummary:
      $ref: schemas/review-summary.yaml
    BadRequestError:
      $ref: 'lib/schemas/bad-request-error.yaml'
    ConflictError:
      $ref: 'lib/schemas/conflict-error.yaml'
    Currency:
      $ref: 'lib/schemas/currency.yaml'
    ErrorItem:
      $ref: 'lib/schemas/error-item.yaml'
    ForbiddenError:
      $ref: 'lib/schemas/forbidden-error.yaml'
    InternalServerError:
      $ref: 'lib/schemas/internal-server-error.yaml'
    NotFoundError:
      $ref: 'lib/schemas/not-found-error.yaml'
    NotAcceptableError:
      $ref: 'lib/schemas/not-acceptable-error.yaml'
    UnauthorizedError:
      $ref: 'lib/schemas/unauthorized-error.yaml'
