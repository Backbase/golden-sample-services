openapi: 3.0.3
info:
  title: Product Integration API
  version: 1.0.0
  description: Description of the API...
  license:
    name: Copyright Backbase
    url: https://www.backbase.com/legal
  x-icon: credit_card
servers:
  - description: Prism mock server
    url: http://localhost:4010
  - description: Service running locally
    url: http://localhost:9915
tags:
  - name: product-integration
paths:
  /integration-api/v1/products:
    post:
      tags:
        - product-integration
      summary:  Create a product
      description: Creates a new product
      operationId: postProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'schemas/definitions.yaml#/components/schemas/Product'
            example:
              $ref: examples/create-product-request.json
      responses:
        '200':
          $ref: 'schemas/definitions.yaml#/components/responses/200ProductId'
        '400':
          $ref: 'lib/common-types.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'lib/common-types.yaml#/components/responses/401Unauthorized'
        '500':
          $ref: 'lib/common-types.yaml#/components/responses/500InternalServerError'
    put:
      tags:
        - product-integration
      summary:  Update a product
      description: Updates an existing product
      operationId: putProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'schemas/definitions.yaml#/components/schemas/Product'
            example:
              $ref: examples/update-product-request.json
      responses:
        '204':
          description: If the product has been updated successfully
        '400':
          $ref: 'lib/common-types.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'lib/common-types.yaml#/components/responses/401Unauthorized'
        '500':
          $ref: 'lib/common-types.yaml#/components/responses/500InternalServerError'

  /integration-api/v1/products/{productId}:
    get:
      tags:
        - product-integration
      summary: Returns a product with the specified product ID
      description: Returns a product with the specified product ID
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          description: productId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          $ref: 'schemas/definitions.yaml#/components/responses/200Product'
        '400':
          $ref: 'lib/common-types.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'lib/common-types.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'lib/common-types.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'lib/common-types.yaml#/components/responses/404NotFound'
        '500':
          $ref: 'lib/common-types.yaml#/components/responses/500InternalServerError'
    delete:
      tags:
        - product-integration
      summary: Deletes a product with the specified product ID
      description: Deletes a product with the specified product ID
      operationId: deleteProduct
      parameters:
        - name: productId
          in: path
          description: productId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: If the product has been deleted successfully
        '400':
          $ref: 'lib/common-types.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'lib/common-types.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'lib/common-types.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'lib/common-types.yaml#/components/responses/404NotFound'
        '500':
          $ref: 'lib/common-types.yaml#/components/responses/500InternalServerError'
