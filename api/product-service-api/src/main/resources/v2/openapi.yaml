openapi: 3.0.3
info:
  title: Product Service API
  version: 2.0.0
  description: Description of the API...
  license:
    name: Copyright Backbase
    url: https://www.backbase.com/legal
servers:
  - description: Prism mock server
    url: http://localhost:4010
  - description: Service running locally
    url: http://localhost:9915
tags:
  - name: product-service
paths:
  /service-api/v2/products:
    get:
      tags:
        - product-service
      summary: List products
      description: Returns a list of products matching the search criteria
      operationId: getProducts
      responses:
        '200':
          description: Products matching the search criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'
              example:
                $ref: examples/product-list.json
        '400':
          description: If one or more request parameters don't comply with the specification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              example:
                $ref: lib/examples/bad-request-validation-error.json
        '401':
          description: If the authentication credentials provided are invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
              example:
                $ref: lib/examples/unauthorized-error.json
        '500':
          description: If a runtime error occurs while processing the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
              example:
                $ref: lib/examples/internal-server-error.json
    post:
      tags:
        - product-service
      summary:  Create a product
      description: Creates a new product
      operationId: postProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
            example:
              $ref: examples/create-product-request.json
      responses:
        '200':
          description: If the product has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductId'
              example:
                $ref: examples/create-product-response.json
        '400':
          description: If one or more request parameters don't comply with the specification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              example:
                $ref: lib/examples/bad-request-validation-error.json
        '401':
          description: If the authentication credentials provided are invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
              example:
                $ref: lib/examples/unauthorized-error.json
        '500':
          description: If a runtime error occurs while processing the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
              example:
                $ref: lib/examples/internal-server-error.json
    put:
      deprecated: true
      tags:
        - product-service
      summary:  Update a product
      description: Updates an existing product
      operationId: putProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
            example:
              $ref: examples/update-product-request.json
      responses:
        '204':
          description: If the product has been updated successfully
        '400':
          description: If one or more request parameters don't comply with the specification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              example:
                $ref: lib/examples/bad-request-validation-error.json
        '401':
          description: If the authentication credentials provided are invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
              example:
                $ref: lib/examples/unauthorized-error.json
        '403':
          description: If the current user doesn't have authorization to update the requested product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
              example:
                $ref: lib/examples/forbidden-error.json
        '404':
          description: If the product cannot be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              example:
                $ref: lib/examples/not-found-error.json
        '500':
          description: If a runtime error occurs while processing the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
              example:
                $ref: lib/examples/internal-server-error.json
  /service-api/v2/products/{productId}:
    get:
      tags:
        - product-service
      summary: Retrieve a product by ID
      description: |
        If the requested product ID is found the method will return information regarding base product information
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          description: productId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: If the product is found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
              example:
                $ref: examples/get-product-response.json
        '401':
          description: If the authentication credentials provided are invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
              example:
                $ref: lib/examples/unauthorized-error.json
        '403':
          description: If the current user doesn't have authorization to view the requested product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
              example:
                $ref: lib/examples/forbidden-error.json
        '404':
          description: If the product cannot be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              example:
                $ref: lib/examples/not-found-error.json
        '500':
          description: If a runtime error occurs while processing the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
              example:
                $ref: lib/examples/internal-server-error.json
    delete:
      tags:
        - product-service
      summary: Delete a product
      description: Deletes an existing product
      operationId: deleteProduct
      parameters:
        - name: productId
          in: path
          description: productId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: If the product has been deleted successfully
        '401':
          description: If the authentication credentials provided are invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
              example:
                $ref: lib/examples/unauthorized-error.json
        '403':
          description: If the current user doesn't have authorization to delete the requested product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
              example:
                $ref: lib/examples/forbidden-error.json
        '404':
          description: If the product cannot be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              example:
                $ref: lib/examples/not-found-error.json
        '500':
          description: If a runtime error occurs while processing the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
              example:
                $ref: lib/examples/internal-server-error.json
    put:
      tags:
        - product-service
      summary:  Update a product
      description: Updates an existing product
      operationId: putProductById
      parameters:
        - name: productId
          in: path
          description: productId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
            example:
              $ref: examples/update-product-request.json
      responses:
        '204':
          description: If the product has been updated successfully
        '401':
          description: If the authentication credentials provided are invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
              example:
                $ref: lib/examples/unauthorized-error.json
        '403':
          description: If the current user doesn't have authorization to update the requested product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
              example:
                $ref: lib/examples/forbidden-error.json
        '404':
          description: If the product cannot be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              example:
                $ref: lib/examples/not-found-error.json
        '500':
          description: If a runtime error occurs while processing the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
              example:
                $ref: lib/examples/internal-server-error.json
components:
  schemas:
    Product:
      $ref: schemas/product.yaml
    ProductList:
      $ref: schemas/product-list.yaml
    ProductId:
      $ref: schemas/product-id.yaml
    BadRequestError:
      $ref: 'lib/schemas/bad-request-error.yaml'
    ConflictError:
      $ref: 'lib/schemas/conflict-error.yaml'
    Currency:
      $ref: 'lib/schemas/currency.yaml'
    ErrorItem:
      $ref: 'lib/schemas/error-item.yaml'
    ForbiddenError:
      $ref: 'lib/schemas/forbidden-error.yaml'
    InternalServerError:
      $ref: 'lib/schemas/internal-server-error.yaml'
    NotFoundError:
      $ref: 'lib/schemas/not-found-error.yaml'
    NotAcceptableError:
      $ref: 'lib/schemas/not-acceptable-error.yaml'
    UnauthorizedError:
      $ref: 'lib/schemas/unauthorized-error.yaml'
